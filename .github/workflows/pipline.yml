name: CI/CD Pipeline
run-name: ${{ github.actor }} is executing the CI/CD pipeline for the real-time-trading-analysis-application ðŸš€
on: [push]
jobs:
  Testing-Phase:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.4'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=utils --cov-report=xml --cov-report=html
      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff check --output-format=github .
        continue-on-error: true
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: |
            junit/test-results.xml
            htmlcov
        if: ${{ always() }}
  Build-and-Push-Images:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && contains(github.event.head_commit.modified, 'infra/') }}
    needs: Testing-Phase  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build and push Docker images
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          docker-compose -f infra/docker-compose.yml build
          echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
          docker-compose -f infra/docker-compose.yml push

  # azure_login:
  #   name: Connect to Azure Cloud
  #   runs-on: ubuntu-latest
  #   needs: checkout
  #   steps:
  #     - name: Connect and configure Azure Cloud
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  # ssh_to_azure:
  #   name: SSH to Azure VM
  #   runs-on: ubuntu-latest
  #   needs: azure_login
  #   steps:
  #     - name: SSH to Azure VM
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: |
  #           echo "SSH connection established."
  # deploy_docker_compose:
  #   name: Deploy Docker Compose to Azure VM
  #   runs-on: ubuntu-latest
  #   needs: ssh_to_azure
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run Docker Compose
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
  #           newgrp docker
  #           cd /home/${{ secrets.SSH_USERNAME }}/repository
  #           docker-compose up -d      